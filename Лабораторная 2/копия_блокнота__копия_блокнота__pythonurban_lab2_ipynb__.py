# -*- coding: utf-8 -*-
"""Копия блокнота "Копия блокнота "PythonUrban_lab2.ipynb""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VykdONd3ciRhWLLy19k79tSnhOdcDMFH

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install pandas
!pip install geopandas 
!pip install mapclassify
!pip install osmnx
!pip install geojson

# TODO собрать импорты всех модулей в одном месте
import json
import geojson
import requests
import pandas as pd
import geopandas as gpd
import osmnx as ox

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Приморский район"  # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/ZhJulia/PythonUrbanITMO-1/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"

STREETS_FILE_URL = "https://raw.githubusercontent.com/ZhJulia/PythonUrbanITMO-1/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"

"""## Территория

"""

district = ox.geocode_to_gdf('Приморский район, Санкт-Петербург')
district.explore(tiles="CartoDB positron")

"""### Загрузка территории из OSM (Extract)"""

# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME
osm_id = "R1115367"  # https://www.openstreetmap.org/relation/1115367
district = ox.geocode_to_gdf([osm_id], by_osmid=True)
district

"""## Улицы"""

gdf = gpd.read_file(STREETS_FILE_URL)
gdf

"""### Загрузка файла с улицами (Extract)"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
gdf

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf["name"].is_unique

gdf[gdf["name"].duplicated()]

gdfstreets = gdf.dissolve(by = "name")
gdfstreets

"""### Сохранение слоя с улицами (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
# TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)

gdf = gdf.rename(columns = ({'name': 'Название'}), inplace = False)
gdf

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('streets.geojson', driver='GeoJSON') 
gdf.explore(tiles="CartoDB positron")

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf = gpd.read_file(KGIOP_FILE_URL, mask=district)

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf["lon"] = gdf.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf["lat"] = gdf.to_crs(3857).geometry.centroid.to_crs(4326).y
gdf

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
gdf.columns
gdf = gdf.rename(columns = ({'id': 'Идентификатор'}), inplace = False)
gdf = gdf.rename(columns = ({'ensemble_name': 'Ансамбль'}), inplace = False)
gdf = gdf.rename(columns = ({'object_name': 'Название'}), inplace = False)
gdf = gdf.rename(columns = ({'occurrence_time': 'Дата возведения'}), inplace = False)
gdf = gdf.rename(columns = ({'object_location': 'Местонахождение'}), inplace = False)
gdf = gdf.rename(columns = ({'historical_category': 'Категория'}), inplace = False)
gdf = gdf.rename(columns = ({'normative_act': 'Нормативный акт'}), inplace = False)
gdf = gdf.rename(columns = ({'object_type': 'Тип объекта'}), inplace = False)
gdf = gdf.rename(columns = ({'lat': 'Широта'}), inplace = False)
gdf = gdf.rename(columns = ({'lon': 'Долгота'}), inplace = False)
gdf

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('kgiopobjects.geojson', driver='GeoJSON')